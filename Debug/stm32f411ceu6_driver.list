
stm32f411ceu6_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000840  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080009d8  080009e0  000109e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080009d8  080009d8  000109e0  2**0
                  CONTENTS
  4 .ARM          00000000  080009d8  080009d8  000109e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080009d8  080009e0  000109e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009d8  080009d8  000109d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080009dc  080009dc  000109dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000109e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080009e0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080009e0  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000109e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000012db  00000000  00000000  00010a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000370  00000000  00000000  00011ceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c8  00000000  00000000  00012060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000a0  00000000  00000000  00012128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002557  00000000  00000000  000121c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001010  00000000  00000000  0001471f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009b53  00000000  00000000  0001572f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0001f282  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000288  00000000  00000000  0001f2d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080009c0 	.word	0x080009c0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080009c0 	.word	0x080009c0

080001d8 <delay>:
#define HIGH 1
#define LOW 0
#define BTN_PRESSED LOW

void delay(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
	// this will introduce ~200ms delay when system clock is 16MHz
	for(uint32_t i = 0 ; i < 500000 ; i ++);
 80001de:	2300      	movs	r3, #0
 80001e0:	607b      	str	r3, [r7, #4]
 80001e2:	e002      	b.n	80001ea <delay+0x12>
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	3301      	adds	r3, #1
 80001e8:	607b      	str	r3, [r7, #4]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4a04      	ldr	r2, [pc, #16]	; (8000200 <delay+0x28>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d9f8      	bls.n	80001e4 <delay+0xc>
}
 80001f2:	bf00      	nop
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr
 8000200:	0007a11f 	.word	0x0007a11f

08000204 <main>:

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b086      	sub	sp, #24
 8000208:	af00      	add	r7, sp, #0

	GPIO_Handle_t GpioLed, GPIOBtn;

	memset(&GpioLed,0,sizeof(GpioLed));
 800020a:	f107 030c 	add.w	r3, r7, #12
 800020e:	220c      	movs	r2, #12
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f000 fbcc 	bl	80009b0 <memset>
	memset(&GPIOBtn,0,sizeof(GpioLed));
 8000218:	463b      	mov	r3, r7
 800021a:	220c      	movs	r2, #12
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f000 fbc6 	bl	80009b0 <memset>

	//this is led gpio configuration
	GpioLed.pGPIOx = GPIOC;
 8000224:	4b1a      	ldr	r3, [pc, #104]	; (8000290 <main+0x8c>)
 8000226:	60fb      	str	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000228:	230d      	movs	r3, #13
 800022a:	743b      	strb	r3, [r7, #16]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800022c:	2301      	movs	r3, #1
 800022e:	747b      	strb	r3, [r7, #17]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8000230:	2300      	movs	r3, #0
 8000232:	74bb      	strb	r3, [r7, #18]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000234:	2300      	movs	r3, #0
 8000236:	753b      	strb	r3, [r7, #20]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000238:	2300      	movs	r3, #0
 800023a:	74fb      	strb	r3, [r7, #19]

	GPIO_PeriClockControl(GPIOD,ENABLE);
 800023c:	2101      	movs	r1, #1
 800023e:	4815      	ldr	r0, [pc, #84]	; (8000294 <main+0x90>)
 8000240:	f000 f866 	bl	8000310 <GPIO_PeriClockControl>

	GPIO_Init(&GpioLed);
 8000244:	f107 030c 	add.w	r3, r7, #12
 8000248:	4618      	mov	r0, r3
 800024a:	f000 f8e7 	bl	800041c <GPIO_Init>


	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 800024e:	4b12      	ldr	r3, [pc, #72]	; (8000298 <main+0x94>)
 8000250:	603b      	str	r3, [r7, #0]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000252:	2300      	movs	r3, #0
 8000254:	713b      	strb	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 8000256:	2304      	movs	r3, #4
 8000258:	717b      	strb	r3, [r7, #5]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800025a:	2302      	movs	r3, #2
 800025c:	71bb      	strb	r3, [r7, #6]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800025e:	2301      	movs	r3, #1
 8000260:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOA,ENABLE);
 8000262:	2101      	movs	r1, #1
 8000264:	480c      	ldr	r0, [pc, #48]	; (8000298 <main+0x94>)
 8000266:	f000 f853 	bl	8000310 <GPIO_PeriClockControl>

	GPIO_Init(&GPIOBtn);
 800026a:	463b      	mov	r3, r7
 800026c:	4618      	mov	r0, r3
 800026e:	f000 f8d5 	bl	800041c <GPIO_Init>

	GPIO_WriteToOutputPin(GPIOC,GPIO_PIN_NO_13,GPIO_PIN_RESET);
 8000272:	2200      	movs	r2, #0
 8000274:	210d      	movs	r1, #13
 8000276:	4806      	ldr	r0, [pc, #24]	; (8000290 <main+0x8c>)
 8000278:	f000 fa6c 	bl	8000754 <GPIO_WriteToOutputPin>
	//IRQ configurations
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI0,NVIC_IRQ_PRI15);
 800027c:	210f      	movs	r1, #15
 800027e:	2006      	movs	r0, #6
 8000280:	f000 fb28 	bl	80008d4 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI0,ENABLE);
 8000284:	2101      	movs	r1, #1
 8000286:	2006      	movs	r0, #6
 8000288:	f000 fa9e 	bl	80007c8 <GPIO_IRQInterruptConfig>

    while(1);
 800028c:	e7fe      	b.n	800028c <main+0x88>
 800028e:	bf00      	nop
 8000290:	40020800 	.word	0x40020800
 8000294:	40020c00 	.word	0x40020c00
 8000298:	40020000 	.word	0x40020000

0800029c <EXTI0_IRQHandler>:

}


void EXTI0_IRQHandler(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	delay(); //200ms . wait till button de-bouncing gets over
 80002a0:	f7ff ff9a 	bl	80001d8 <delay>
	GPIO_IRQHandling(GPIO_PIN_NO_0); //clear the pending event from exti line
 80002a4:	2000      	movs	r0, #0
 80002a6:	f000 fb3f 	bl	8000928 <GPIO_IRQHandling>
	GPIO_ToggleOutputPin(GPIOC,GPIO_PIN_NO_13);
 80002aa:	210d      	movs	r1, #13
 80002ac:	4802      	ldr	r0, [pc, #8]	; (80002b8 <EXTI0_IRQHandler+0x1c>)
 80002ae:	f000 fa76 	bl	800079e <GPIO_ToggleOutputPin>
}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	40020800 	.word	0x40020800

080002bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002bc:	480d      	ldr	r0, [pc, #52]	; (80002f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c4:	480c      	ldr	r0, [pc, #48]	; (80002f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80002c6:	490d      	ldr	r1, [pc, #52]	; (80002fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c8:	4a0d      	ldr	r2, [pc, #52]	; (8000300 <LoopForever+0xe>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002cc:	e002      	b.n	80002d4 <LoopCopyDataInit>

080002ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002d2:	3304      	adds	r3, #4

080002d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d8:	d3f9      	bcc.n	80002ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002da:	4a0a      	ldr	r2, [pc, #40]	; (8000304 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002dc:	4c0a      	ldr	r4, [pc, #40]	; (8000308 <LoopForever+0x16>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e0:	e001      	b.n	80002e6 <LoopFillZerobss>

080002e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e4:	3204      	adds	r2, #4

080002e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e8:	d3fb      	bcc.n	80002e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ea:	f000 fb3d 	bl	8000968 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ee:	f7ff ff89 	bl	8000204 <main>

080002f2 <LoopForever>:

LoopForever:
    b LoopForever
 80002f2:	e7fe      	b.n	80002f2 <LoopForever>
  ldr   r0, =_estack
 80002f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002fc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000300:	080009e0 	.word	0x080009e0
  ldr r2, =_sbss
 8000304:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000308:	2000001c 	.word	0x2000001c

0800030c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800030c:	e7fe      	b.n	800030c <ADC_IRQHandler>
	...

08000310 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	460b      	mov	r3, r1
 800031a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800031c:	78fb      	ldrb	r3, [r7, #3]
 800031e:	2b01      	cmp	r3, #1
 8000320:	d161      	bne.n	80003e6 <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	4a33      	ldr	r2, [pc, #204]	; (80003f4 <GPIO_PeriClockControl+0xe4>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d106      	bne.n	8000338 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800032a:	4b33      	ldr	r3, [pc, #204]	; (80003f8 <GPIO_PeriClockControl+0xe8>)
 800032c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032e:	4a32      	ldr	r2, [pc, #200]	; (80003f8 <GPIO_PeriClockControl+0xe8>)
 8000330:	f043 0301 	orr.w	r3, r3, #1
 8000334:	6313      	str	r3, [r2, #48]	; 0x30
	else
	{
		//TODO
	}

}
 8000336:	e056      	b.n	80003e6 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	4a30      	ldr	r2, [pc, #192]	; (80003fc <GPIO_PeriClockControl+0xec>)
 800033c:	4293      	cmp	r3, r2
 800033e:	d106      	bne.n	800034e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000340:	4b2d      	ldr	r3, [pc, #180]	; (80003f8 <GPIO_PeriClockControl+0xe8>)
 8000342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000344:	4a2c      	ldr	r2, [pc, #176]	; (80003f8 <GPIO_PeriClockControl+0xe8>)
 8000346:	f043 0302 	orr.w	r3, r3, #2
 800034a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800034c:	e04b      	b.n	80003e6 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	4a2b      	ldr	r2, [pc, #172]	; (8000400 <GPIO_PeriClockControl+0xf0>)
 8000352:	4293      	cmp	r3, r2
 8000354:	d106      	bne.n	8000364 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000356:	4b28      	ldr	r3, [pc, #160]	; (80003f8 <GPIO_PeriClockControl+0xe8>)
 8000358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800035a:	4a27      	ldr	r2, [pc, #156]	; (80003f8 <GPIO_PeriClockControl+0xe8>)
 800035c:	f043 0304 	orr.w	r3, r3, #4
 8000360:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000362:	e040      	b.n	80003e6 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	4a27      	ldr	r2, [pc, #156]	; (8000404 <GPIO_PeriClockControl+0xf4>)
 8000368:	4293      	cmp	r3, r2
 800036a:	d106      	bne.n	800037a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800036c:	4b22      	ldr	r3, [pc, #136]	; (80003f8 <GPIO_PeriClockControl+0xe8>)
 800036e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000370:	4a21      	ldr	r2, [pc, #132]	; (80003f8 <GPIO_PeriClockControl+0xe8>)
 8000372:	f043 0308 	orr.w	r3, r3, #8
 8000376:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000378:	e035      	b.n	80003e6 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4a22      	ldr	r2, [pc, #136]	; (8000408 <GPIO_PeriClockControl+0xf8>)
 800037e:	4293      	cmp	r3, r2
 8000380:	d106      	bne.n	8000390 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000382:	4b1d      	ldr	r3, [pc, #116]	; (80003f8 <GPIO_PeriClockControl+0xe8>)
 8000384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000386:	4a1c      	ldr	r2, [pc, #112]	; (80003f8 <GPIO_PeriClockControl+0xe8>)
 8000388:	f043 0310 	orr.w	r3, r3, #16
 800038c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800038e:	e02a      	b.n	80003e6 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	4a1e      	ldr	r2, [pc, #120]	; (800040c <GPIO_PeriClockControl+0xfc>)
 8000394:	4293      	cmp	r3, r2
 8000396:	d106      	bne.n	80003a6 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000398:	4b17      	ldr	r3, [pc, #92]	; (80003f8 <GPIO_PeriClockControl+0xe8>)
 800039a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039c:	4a16      	ldr	r2, [pc, #88]	; (80003f8 <GPIO_PeriClockControl+0xe8>)
 800039e:	f043 0320 	orr.w	r3, r3, #32
 80003a2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a4:	e01f      	b.n	80003e6 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4a19      	ldr	r2, [pc, #100]	; (8000410 <GPIO_PeriClockControl+0x100>)
 80003aa:	4293      	cmp	r3, r2
 80003ac:	d106      	bne.n	80003bc <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80003ae:	4b12      	ldr	r3, [pc, #72]	; (80003f8 <GPIO_PeriClockControl+0xe8>)
 80003b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b2:	4a11      	ldr	r2, [pc, #68]	; (80003f8 <GPIO_PeriClockControl+0xe8>)
 80003b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ba:	e014      	b.n	80003e6 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	4a15      	ldr	r2, [pc, #84]	; (8000414 <GPIO_PeriClockControl+0x104>)
 80003c0:	4293      	cmp	r3, r2
 80003c2:	d106      	bne.n	80003d2 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80003c4:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <GPIO_PeriClockControl+0xe8>)
 80003c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c8:	4a0b      	ldr	r2, [pc, #44]	; (80003f8 <GPIO_PeriClockControl+0xe8>)
 80003ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003ce:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d0:	e009      	b.n	80003e6 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4a10      	ldr	r2, [pc, #64]	; (8000418 <GPIO_PeriClockControl+0x108>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d105      	bne.n	80003e6 <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 80003da:	4b07      	ldr	r3, [pc, #28]	; (80003f8 <GPIO_PeriClockControl+0xe8>)
 80003dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003de:	4a06      	ldr	r2, [pc, #24]	; (80003f8 <GPIO_PeriClockControl+0xe8>)
 80003e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003e4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e6:	bf00      	nop
 80003e8:	370c      	adds	r7, #12
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	40020000 	.word	0x40020000
 80003f8:	40023800 	.word	0x40023800
 80003fc:	40020400 	.word	0x40020400
 8000400:	40020800 	.word	0x40020800
 8000404:	40020c00 	.word	0x40020c00
 8000408:	40021000 	.word	0x40021000
 800040c:	40021400 	.word	0x40021400
 8000410:	40021800 	.word	0x40021800
 8000414:	40021c00 	.word	0x40021c00
 8000418:	40022000 	.word	0x40022000

0800041c <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b086      	sub	sp, #24
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 8000424:	2300      	movs	r3, #0
 8000426:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	2101      	movs	r1, #1
 800042e:	4618      	mov	r0, r3
 8000430:	f7ff ff6e 	bl	8000310 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	795b      	ldrb	r3, [r3, #5]
 8000438:	2b03      	cmp	r3, #3
 800043a:	d820      	bhi.n	800047e <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	795b      	ldrb	r3, [r3, #5]
 8000440:	461a      	mov	r2, r3
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	791b      	ldrb	r3, [r3, #4]
 8000446:	005b      	lsls	r3, r3, #1
 8000448:	fa02 f303 	lsl.w	r3, r2, r3
 800044c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	681a      	ldr	r2, [r3, #0]
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	791b      	ldrb	r3, [r3, #4]
 8000458:	005b      	lsls	r3, r3, #1
 800045a:	2103      	movs	r1, #3
 800045c:	fa01 f303 	lsl.w	r3, r1, r3
 8000460:	43db      	mvns	r3, r3
 8000462:	4619      	mov	r1, r3
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	400a      	ands	r2, r1
 800046a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	6819      	ldr	r1, [r3, #0]
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	697a      	ldr	r2, [r7, #20]
 8000478:	430a      	orrs	r2, r1
 800047a:	601a      	str	r2, [r3, #0]
 800047c:	e0cb      	b.n	8000616 <GPIO_Init+0x1fa>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	795b      	ldrb	r3, [r3, #5]
 8000482:	2b04      	cmp	r3, #4
 8000484:	d117      	bne.n	80004b6 <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000486:	4b4b      	ldr	r3, [pc, #300]	; (80005b4 <GPIO_Init+0x198>)
 8000488:	68db      	ldr	r3, [r3, #12]
 800048a:	687a      	ldr	r2, [r7, #4]
 800048c:	7912      	ldrb	r2, [r2, #4]
 800048e:	4611      	mov	r1, r2
 8000490:	2201      	movs	r2, #1
 8000492:	408a      	lsls	r2, r1
 8000494:	4611      	mov	r1, r2
 8000496:	4a47      	ldr	r2, [pc, #284]	; (80005b4 <GPIO_Init+0x198>)
 8000498:	430b      	orrs	r3, r1
 800049a:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800049c:	4b45      	ldr	r3, [pc, #276]	; (80005b4 <GPIO_Init+0x198>)
 800049e:	689b      	ldr	r3, [r3, #8]
 80004a0:	687a      	ldr	r2, [r7, #4]
 80004a2:	7912      	ldrb	r2, [r2, #4]
 80004a4:	4611      	mov	r1, r2
 80004a6:	2201      	movs	r2, #1
 80004a8:	408a      	lsls	r2, r1
 80004aa:	43d2      	mvns	r2, r2
 80004ac:	4611      	mov	r1, r2
 80004ae:	4a41      	ldr	r2, [pc, #260]	; (80005b4 <GPIO_Init+0x198>)
 80004b0:	400b      	ands	r3, r1
 80004b2:	6093      	str	r3, [r2, #8]
 80004b4:	e035      	b.n	8000522 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	795b      	ldrb	r3, [r3, #5]
 80004ba:	2b05      	cmp	r3, #5
 80004bc:	d117      	bne.n	80004ee <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004be:	4b3d      	ldr	r3, [pc, #244]	; (80005b4 <GPIO_Init+0x198>)
 80004c0:	689b      	ldr	r3, [r3, #8]
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	7912      	ldrb	r2, [r2, #4]
 80004c6:	4611      	mov	r1, r2
 80004c8:	2201      	movs	r2, #1
 80004ca:	408a      	lsls	r2, r1
 80004cc:	4611      	mov	r1, r2
 80004ce:	4a39      	ldr	r2, [pc, #228]	; (80005b4 <GPIO_Init+0x198>)
 80004d0:	430b      	orrs	r3, r1
 80004d2:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004d4:	4b37      	ldr	r3, [pc, #220]	; (80005b4 <GPIO_Init+0x198>)
 80004d6:	68db      	ldr	r3, [r3, #12]
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	7912      	ldrb	r2, [r2, #4]
 80004dc:	4611      	mov	r1, r2
 80004de:	2201      	movs	r2, #1
 80004e0:	408a      	lsls	r2, r1
 80004e2:	43d2      	mvns	r2, r2
 80004e4:	4611      	mov	r1, r2
 80004e6:	4a33      	ldr	r2, [pc, #204]	; (80005b4 <GPIO_Init+0x198>)
 80004e8:	400b      	ands	r3, r1
 80004ea:	60d3      	str	r3, [r2, #12]
 80004ec:	e019      	b.n	8000522 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	795b      	ldrb	r3, [r3, #5]
 80004f2:	2b06      	cmp	r3, #6
 80004f4:	d115      	bne.n	8000522 <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004f6:	4b2f      	ldr	r3, [pc, #188]	; (80005b4 <GPIO_Init+0x198>)
 80004f8:	689b      	ldr	r3, [r3, #8]
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	7912      	ldrb	r2, [r2, #4]
 80004fe:	4611      	mov	r1, r2
 8000500:	2201      	movs	r2, #1
 8000502:	408a      	lsls	r2, r1
 8000504:	4611      	mov	r1, r2
 8000506:	4a2b      	ldr	r2, [pc, #172]	; (80005b4 <GPIO_Init+0x198>)
 8000508:	430b      	orrs	r3, r1
 800050a:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800050c:	4b29      	ldr	r3, [pc, #164]	; (80005b4 <GPIO_Init+0x198>)
 800050e:	68db      	ldr	r3, [r3, #12]
 8000510:	687a      	ldr	r2, [r7, #4]
 8000512:	7912      	ldrb	r2, [r2, #4]
 8000514:	4611      	mov	r1, r2
 8000516:	2201      	movs	r2, #1
 8000518:	408a      	lsls	r2, r1
 800051a:	4611      	mov	r1, r2
 800051c:	4a25      	ldr	r2, [pc, #148]	; (80005b4 <GPIO_Init+0x198>)
 800051e:	430b      	orrs	r3, r1
 8000520:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	791b      	ldrb	r3, [r3, #4]
 8000526:	089b      	lsrs	r3, r3, #2
 8000528:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	791b      	ldrb	r3, [r3, #4]
 800052e:	f003 0303 	and.w	r3, r3, #3
 8000532:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a1f      	ldr	r2, [pc, #124]	; (80005b8 <GPIO_Init+0x19c>)
 800053a:	4293      	cmp	r3, r2
 800053c:	d04e      	beq.n	80005dc <GPIO_Init+0x1c0>
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4a1e      	ldr	r2, [pc, #120]	; (80005bc <GPIO_Init+0x1a0>)
 8000544:	4293      	cmp	r3, r2
 8000546:	d032      	beq.n	80005ae <GPIO_Init+0x192>
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a1c      	ldr	r2, [pc, #112]	; (80005c0 <GPIO_Init+0x1a4>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d02b      	beq.n	80005aa <GPIO_Init+0x18e>
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a1b      	ldr	r2, [pc, #108]	; (80005c4 <GPIO_Init+0x1a8>)
 8000558:	4293      	cmp	r3, r2
 800055a:	d024      	beq.n	80005a6 <GPIO_Init+0x18a>
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a19      	ldr	r2, [pc, #100]	; (80005c8 <GPIO_Init+0x1ac>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d01d      	beq.n	80005a2 <GPIO_Init+0x186>
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a18      	ldr	r2, [pc, #96]	; (80005cc <GPIO_Init+0x1b0>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d016      	beq.n	800059e <GPIO_Init+0x182>
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a16      	ldr	r2, [pc, #88]	; (80005d0 <GPIO_Init+0x1b4>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d00f      	beq.n	800059a <GPIO_Init+0x17e>
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a15      	ldr	r2, [pc, #84]	; (80005d4 <GPIO_Init+0x1b8>)
 8000580:	4293      	cmp	r3, r2
 8000582:	d008      	beq.n	8000596 <GPIO_Init+0x17a>
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a13      	ldr	r2, [pc, #76]	; (80005d8 <GPIO_Init+0x1bc>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d101      	bne.n	8000592 <GPIO_Init+0x176>
 800058e:	2308      	movs	r3, #8
 8000590:	e025      	b.n	80005de <GPIO_Init+0x1c2>
 8000592:	2300      	movs	r3, #0
 8000594:	e023      	b.n	80005de <GPIO_Init+0x1c2>
 8000596:	2307      	movs	r3, #7
 8000598:	e021      	b.n	80005de <GPIO_Init+0x1c2>
 800059a:	2306      	movs	r3, #6
 800059c:	e01f      	b.n	80005de <GPIO_Init+0x1c2>
 800059e:	2305      	movs	r3, #5
 80005a0:	e01d      	b.n	80005de <GPIO_Init+0x1c2>
 80005a2:	2304      	movs	r3, #4
 80005a4:	e01b      	b.n	80005de <GPIO_Init+0x1c2>
 80005a6:	2303      	movs	r3, #3
 80005a8:	e019      	b.n	80005de <GPIO_Init+0x1c2>
 80005aa:	2302      	movs	r3, #2
 80005ac:	e017      	b.n	80005de <GPIO_Init+0x1c2>
 80005ae:	2301      	movs	r3, #1
 80005b0:	e015      	b.n	80005de <GPIO_Init+0x1c2>
 80005b2:	bf00      	nop
 80005b4:	40013c00 	.word	0x40013c00
 80005b8:	40020000 	.word	0x40020000
 80005bc:	40020400 	.word	0x40020400
 80005c0:	40020800 	.word	0x40020800
 80005c4:	40020c00 	.word	0x40020c00
 80005c8:	40021000 	.word	0x40021000
 80005cc:	40021400 	.word	0x40021400
 80005d0:	40021800 	.word	0x40021800
 80005d4:	40021c00 	.word	0x40021c00
 80005d8:	40022000 	.word	0x40022000
 80005dc:	2300      	movs	r3, #0
 80005de:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80005e0:	4b59      	ldr	r3, [pc, #356]	; (8000748 <GPIO_Init+0x32c>)
 80005e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005e4:	4a58      	ldr	r2, [pc, #352]	; (8000748 <GPIO_Init+0x32c>)
 80005e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ea:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 80005ec:	7c7a      	ldrb	r2, [r7, #17]
 80005ee:	7cbb      	ldrb	r3, [r7, #18]
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	fa02 f103 	lsl.w	r1, r2, r3
 80005f6:	4a55      	ldr	r2, [pc, #340]	; (800074c <GPIO_Init+0x330>)
 80005f8:	7cfb      	ldrb	r3, [r7, #19]
 80005fa:	3302      	adds	r3, #2
 80005fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000600:	4b53      	ldr	r3, [pc, #332]	; (8000750 <GPIO_Init+0x334>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	7912      	ldrb	r2, [r2, #4]
 8000608:	4611      	mov	r1, r2
 800060a:	2201      	movs	r2, #1
 800060c:	408a      	lsls	r2, r1
 800060e:	4611      	mov	r1, r2
 8000610:	4a4f      	ldr	r2, [pc, #316]	; (8000750 <GPIO_Init+0x334>)
 8000612:	430b      	orrs	r3, r1
 8000614:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	799b      	ldrb	r3, [r3, #6]
 800061a:	461a      	mov	r2, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	791b      	ldrb	r3, [r3, #4]
 8000620:	005b      	lsls	r3, r3, #1
 8000622:	fa02 f303 	lsl.w	r3, r2, r3
 8000626:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	689a      	ldr	r2, [r3, #8]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	791b      	ldrb	r3, [r3, #4]
 8000632:	005b      	lsls	r3, r3, #1
 8000634:	2103      	movs	r1, #3
 8000636:	fa01 f303 	lsl.w	r3, r1, r3
 800063a:	43db      	mvns	r3, r3
 800063c:	4619      	mov	r1, r3
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	400a      	ands	r2, r1
 8000644:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	6899      	ldr	r1, [r3, #8]
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	697a      	ldr	r2, [r7, #20]
 8000652:	430a      	orrs	r2, r1
 8000654:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	79db      	ldrb	r3, [r3, #7]
 800065a:	461a      	mov	r2, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	791b      	ldrb	r3, [r3, #4]
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	fa02 f303 	lsl.w	r3, r2, r3
 8000666:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	68da      	ldr	r2, [r3, #12]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	791b      	ldrb	r3, [r3, #4]
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	2103      	movs	r1, #3
 8000676:	fa01 f303 	lsl.w	r3, r1, r3
 800067a:	43db      	mvns	r3, r3
 800067c:	4619      	mov	r1, r3
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	400a      	ands	r2, r1
 8000684:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	68d9      	ldr	r1, [r3, #12]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	697a      	ldr	r2, [r7, #20]
 8000692:	430a      	orrs	r2, r1
 8000694:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	7a1b      	ldrb	r3, [r3, #8]
 800069a:	461a      	mov	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	791b      	ldrb	r3, [r3, #4]
 80006a0:	fa02 f303 	lsl.w	r3, r2, r3
 80006a4:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	685a      	ldr	r2, [r3, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	791b      	ldrb	r3, [r3, #4]
 80006b0:	4619      	mov	r1, r3
 80006b2:	2301      	movs	r3, #1
 80006b4:	408b      	lsls	r3, r1
 80006b6:	43db      	mvns	r3, r3
 80006b8:	4619      	mov	r1, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	400a      	ands	r2, r1
 80006c0:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	6859      	ldr	r1, [r3, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	697a      	ldr	r2, [r7, #20]
 80006ce:	430a      	orrs	r2, r1
 80006d0:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	795b      	ldrb	r3, [r3, #5]
 80006d6:	2b02      	cmp	r3, #2
 80006d8:	d131      	bne.n	800073e <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	791b      	ldrb	r3, [r3, #4]
 80006de:	08db      	lsrs	r3, r3, #3
 80006e0:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	791b      	ldrb	r3, [r3, #4]
 80006e6:	f003 0307 	and.w	r3, r3, #7
 80006ea:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	7c3a      	ldrb	r2, [r7, #16]
 80006f2:	3208      	adds	r2, #8
 80006f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	220f      	movs	r2, #15
 80006fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000702:	43db      	mvns	r3, r3
 8000704:	4618      	mov	r0, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	7c3a      	ldrb	r2, [r7, #16]
 800070c:	4001      	ands	r1, r0
 800070e:	3208      	adds	r2, #8
 8000710:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	7c3a      	ldrb	r2, [r7, #16]
 800071a:	3208      	adds	r2, #8
 800071c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	7a5b      	ldrb	r3, [r3, #9]
 8000724:	461a      	mov	r2, r3
 8000726:	7bfb      	ldrb	r3, [r7, #15]
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	fa02 f303 	lsl.w	r3, r2, r3
 800072e:	4618      	mov	r0, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	7c3a      	ldrb	r2, [r7, #16]
 8000736:	4301      	orrs	r1, r0
 8000738:	3208      	adds	r2, #8
 800073a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 800073e:	bf00      	nop
 8000740:	3718      	adds	r7, #24
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800
 800074c:	40013800 	.word	0x40013800
 8000750:	40013c00 	.word	0x40013c00

08000754 <GPIO_WriteToOutputPin>:
 *
 * @Note              -

 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	460b      	mov	r3, r1
 800075e:	70fb      	strb	r3, [r7, #3]
 8000760:	4613      	mov	r3, r2
 8000762:	70bb      	strb	r3, [r7, #2]

	if(Value == GPIO_PIN_SET)
 8000764:	78bb      	ldrb	r3, [r7, #2]
 8000766:	2b01      	cmp	r3, #1
 8000768:	d109      	bne.n	800077e <GPIO_WriteToOutputPin+0x2a>
	{
		//write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx->ODR |= ( 1 << PinNumber);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	78fa      	ldrb	r2, [r7, #3]
 8000770:	2101      	movs	r1, #1
 8000772:	fa01 f202 	lsl.w	r2, r1, r2
 8000776:	431a      	orrs	r2, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	615a      	str	r2, [r3, #20]
	}else
	{
		//write 0
		pGPIOx->ODR &= ~( 1 << PinNumber);
	}
}
 800077c:	e009      	b.n	8000792 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~( 1 << PinNumber);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	78fa      	ldrb	r2, [r7, #3]
 8000784:	2101      	movs	r1, #1
 8000786:	fa01 f202 	lsl.w	r2, r1, r2
 800078a:	43d2      	mvns	r2, r2
 800078c:	401a      	ands	r2, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	615a      	str	r2, [r3, #20]
}
 8000792:	bf00      	nop
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr

0800079e <GPIO_ToggleOutputPin>:
 *
 * @Note              -

 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 800079e:	b480      	push	{r7}
 80007a0:	b083      	sub	sp, #12
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	6078      	str	r0, [r7, #4]
 80007a6:	460b      	mov	r3, r1
 80007a8:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR  ^= ( 1 << PinNumber);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	695b      	ldr	r3, [r3, #20]
 80007ae:	78fa      	ldrb	r2, [r7, #3]
 80007b0:	2101      	movs	r1, #1
 80007b2:	fa01 f202 	lsl.w	r2, r1, r2
 80007b6:	405a      	eors	r2, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	615a      	str	r2, [r3, #20]
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <GPIO_IRQInterruptConfig>:
 *
 * @Note              -

 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	460a      	mov	r2, r1
 80007d2:	71fb      	strb	r3, [r7, #7]
 80007d4:	4613      	mov	r3, r2
 80007d6:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE)
 80007d8:	79bb      	ldrb	r3, [r7, #6]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d133      	bne.n	8000846 <GPIO_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	2b1f      	cmp	r3, #31
 80007e2:	d80a      	bhi.n	80007fa <GPIO_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 80007e4:	4b35      	ldr	r3, [pc, #212]	; (80008bc <GPIO_IRQInterruptConfig+0xf4>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	79fa      	ldrb	r2, [r7, #7]
 80007ea:	2101      	movs	r1, #1
 80007ec:	fa01 f202 	lsl.w	r2, r1, r2
 80007f0:	4611      	mov	r1, r2
 80007f2:	4a32      	ldr	r2, [pc, #200]	; (80008bc <GPIO_IRQInterruptConfig+0xf4>)
 80007f4:	430b      	orrs	r3, r1
 80007f6:	6013      	str	r3, [r2, #0]
			//program ICER2 register
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
		}
	}

}
 80007f8:	e059      	b.n	80008ae <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	2b1f      	cmp	r3, #31
 80007fe:	d90f      	bls.n	8000820 <GPIO_IRQInterruptConfig+0x58>
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	2b3f      	cmp	r3, #63	; 0x3f
 8000804:	d80c      	bhi.n	8000820 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8000806:	4b2e      	ldr	r3, [pc, #184]	; (80008c0 <GPIO_IRQInterruptConfig+0xf8>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	79fa      	ldrb	r2, [r7, #7]
 800080c:	f002 021f 	and.w	r2, r2, #31
 8000810:	2101      	movs	r1, #1
 8000812:	fa01 f202 	lsl.w	r2, r1, r2
 8000816:	4611      	mov	r1, r2
 8000818:	4a29      	ldr	r2, [pc, #164]	; (80008c0 <GPIO_IRQInterruptConfig+0xf8>)
 800081a:	430b      	orrs	r3, r1
 800081c:	6013      	str	r3, [r2, #0]
 800081e:	e046      	b.n	80008ae <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	2b3f      	cmp	r3, #63	; 0x3f
 8000824:	d943      	bls.n	80008ae <GPIO_IRQInterruptConfig+0xe6>
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	2b5f      	cmp	r3, #95	; 0x5f
 800082a:	d840      	bhi.n	80008ae <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= ( 1 << (IRQNumber % 64) );
 800082c:	4b25      	ldr	r3, [pc, #148]	; (80008c4 <GPIO_IRQInterruptConfig+0xfc>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	79fa      	ldrb	r2, [r7, #7]
 8000832:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000836:	2101      	movs	r1, #1
 8000838:	fa01 f202 	lsl.w	r2, r1, r2
 800083c:	4611      	mov	r1, r2
 800083e:	4a21      	ldr	r2, [pc, #132]	; (80008c4 <GPIO_IRQInterruptConfig+0xfc>)
 8000840:	430b      	orrs	r3, r1
 8000842:	6013      	str	r3, [r2, #0]
}
 8000844:	e033      	b.n	80008ae <GPIO_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	2b1f      	cmp	r3, #31
 800084a:	d80a      	bhi.n	8000862 <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 800084c:	4b1e      	ldr	r3, [pc, #120]	; (80008c8 <GPIO_IRQInterruptConfig+0x100>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	79fa      	ldrb	r2, [r7, #7]
 8000852:	2101      	movs	r1, #1
 8000854:	fa01 f202 	lsl.w	r2, r1, r2
 8000858:	4611      	mov	r1, r2
 800085a:	4a1b      	ldr	r2, [pc, #108]	; (80008c8 <GPIO_IRQInterruptConfig+0x100>)
 800085c:	430b      	orrs	r3, r1
 800085e:	6013      	str	r3, [r2, #0]
}
 8000860:	e025      	b.n	80008ae <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	2b1f      	cmp	r3, #31
 8000866:	d90f      	bls.n	8000888 <GPIO_IRQInterruptConfig+0xc0>
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	2b3f      	cmp	r3, #63	; 0x3f
 800086c:	d80c      	bhi.n	8000888 <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 800086e:	4b17      	ldr	r3, [pc, #92]	; (80008cc <GPIO_IRQInterruptConfig+0x104>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	79fa      	ldrb	r2, [r7, #7]
 8000874:	f002 021f 	and.w	r2, r2, #31
 8000878:	2101      	movs	r1, #1
 800087a:	fa01 f202 	lsl.w	r2, r1, r2
 800087e:	4611      	mov	r1, r2
 8000880:	4a12      	ldr	r2, [pc, #72]	; (80008cc <GPIO_IRQInterruptConfig+0x104>)
 8000882:	430b      	orrs	r3, r1
 8000884:	6013      	str	r3, [r2, #0]
 8000886:	e012      	b.n	80008ae <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	2b3f      	cmp	r3, #63	; 0x3f
 800088c:	d90f      	bls.n	80008ae <GPIO_IRQInterruptConfig+0xe6>
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	2b5f      	cmp	r3, #95	; 0x5f
 8000892:	d80c      	bhi.n	80008ae <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
 8000894:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <GPIO_IRQInterruptConfig+0x108>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	79fa      	ldrb	r2, [r7, #7]
 800089a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800089e:	2101      	movs	r1, #1
 80008a0:	fa01 f202 	lsl.w	r2, r1, r2
 80008a4:	4611      	mov	r1, r2
 80008a6:	4a0a      	ldr	r2, [pc, #40]	; (80008d0 <GPIO_IRQInterruptConfig+0x108>)
 80008a8:	430b      	orrs	r3, r1
 80008aa:	6013      	str	r3, [r2, #0]
}
 80008ac:	e7ff      	b.n	80008ae <GPIO_IRQInterruptConfig+0xe6>
 80008ae:	bf00      	nop
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	e000e100 	.word	0xe000e100
 80008c0:	e000e104 	.word	0xe000e104
 80008c4:	e000e108 	.word	0xe000e108
 80008c8:	e000e180 	.word	0xe000e180
 80008cc:	e000e184 	.word	0xe000e184
 80008d0:	e000e188 	.word	0xe000e188

080008d4 <GPIO_IRQPriorityConfig>:
 *
 * @Note              -

 */
void GPIO_IRQPriorityConfig(uint8_t IRQNumber,uint32_t IRQPriority)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	6039      	str	r1, [r7, #0]
 80008de:	71fb      	strb	r3, [r7, #7]
	//1. first lets find out the ipr register
	uint8_t iprx = IRQNumber / 4;
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	089b      	lsrs	r3, r3, #2
 80008e4:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section  = IRQNumber %4 ;
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	f003 0303 	and.w	r3, r3, #3
 80008ec:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = ( 8 * iprx_section) + ( 8 - NO_PR_BITS_IMPLEMENTED) ;
 80008ee:	7bbb      	ldrb	r3, [r7, #14]
 80008f0:	00db      	lsls	r3, r3, #3
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	3304      	adds	r3, #4
 80008f6:	737b      	strb	r3, [r7, #13]

	*(  NVIC_PR_BASE_ADDR + iprx ) |=  ( IRQPriority << shift_amount );
 80008f8:	7bfb      	ldrb	r3, [r7, #15]
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000900:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000904:	6819      	ldr	r1, [r3, #0]
 8000906:	7b7b      	ldrb	r3, [r7, #13]
 8000908:	683a      	ldr	r2, [r7, #0]
 800090a:	409a      	lsls	r2, r3
 800090c:	7bfb      	ldrb	r3, [r7, #15]
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000914:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000918:	430a      	orrs	r2, r1
 800091a:	601a      	str	r2, [r3, #0]

}
 800091c:	bf00      	nop
 800091e:	3714      	adds	r7, #20
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <GPIO_IRQHandling>:
 *
 * @Note              -

 */
void GPIO_IRQHandling(uint8_t PinNumber)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
	//clear the exti pr register corresponding to the pin number
	if(EXTI->PR & ( 1 << PinNumber))
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <GPIO_IRQHandling+0x3c>)
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	79fa      	ldrb	r2, [r7, #7]
 8000938:	2101      	movs	r1, #1
 800093a:	fa01 f202 	lsl.w	r2, r1, r2
 800093e:	4013      	ands	r3, r2
 8000940:	2b00      	cmp	r3, #0
 8000942:	d009      	beq.n	8000958 <GPIO_IRQHandling+0x30>
	{
		//clear
		EXTI->PR |= ( 1 << PinNumber);
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <GPIO_IRQHandling+0x3c>)
 8000946:	695b      	ldr	r3, [r3, #20]
 8000948:	79fa      	ldrb	r2, [r7, #7]
 800094a:	2101      	movs	r1, #1
 800094c:	fa01 f202 	lsl.w	r2, r1, r2
 8000950:	4611      	mov	r1, r2
 8000952:	4a04      	ldr	r2, [pc, #16]	; (8000964 <GPIO_IRQHandling+0x3c>)
 8000954:	430b      	orrs	r3, r1
 8000956:	6153      	str	r3, [r2, #20]
	}

}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	40013c00 	.word	0x40013c00

08000968 <__libc_init_array>:
 8000968:	b570      	push	{r4, r5, r6, lr}
 800096a:	4d0d      	ldr	r5, [pc, #52]	; (80009a0 <__libc_init_array+0x38>)
 800096c:	4c0d      	ldr	r4, [pc, #52]	; (80009a4 <__libc_init_array+0x3c>)
 800096e:	1b64      	subs	r4, r4, r5
 8000970:	10a4      	asrs	r4, r4, #2
 8000972:	2600      	movs	r6, #0
 8000974:	42a6      	cmp	r6, r4
 8000976:	d109      	bne.n	800098c <__libc_init_array+0x24>
 8000978:	4d0b      	ldr	r5, [pc, #44]	; (80009a8 <__libc_init_array+0x40>)
 800097a:	4c0c      	ldr	r4, [pc, #48]	; (80009ac <__libc_init_array+0x44>)
 800097c:	f000 f820 	bl	80009c0 <_init>
 8000980:	1b64      	subs	r4, r4, r5
 8000982:	10a4      	asrs	r4, r4, #2
 8000984:	2600      	movs	r6, #0
 8000986:	42a6      	cmp	r6, r4
 8000988:	d105      	bne.n	8000996 <__libc_init_array+0x2e>
 800098a:	bd70      	pop	{r4, r5, r6, pc}
 800098c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000990:	4798      	blx	r3
 8000992:	3601      	adds	r6, #1
 8000994:	e7ee      	b.n	8000974 <__libc_init_array+0xc>
 8000996:	f855 3b04 	ldr.w	r3, [r5], #4
 800099a:	4798      	blx	r3
 800099c:	3601      	adds	r6, #1
 800099e:	e7f2      	b.n	8000986 <__libc_init_array+0x1e>
 80009a0:	080009d8 	.word	0x080009d8
 80009a4:	080009d8 	.word	0x080009d8
 80009a8:	080009d8 	.word	0x080009d8
 80009ac:	080009dc 	.word	0x080009dc

080009b0 <memset>:
 80009b0:	4402      	add	r2, r0
 80009b2:	4603      	mov	r3, r0
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d100      	bne.n	80009ba <memset+0xa>
 80009b8:	4770      	bx	lr
 80009ba:	f803 1b01 	strb.w	r1, [r3], #1
 80009be:	e7f9      	b.n	80009b4 <memset+0x4>

080009c0 <_init>:
 80009c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009c2:	bf00      	nop
 80009c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009c6:	bc08      	pop	{r3}
 80009c8:	469e      	mov	lr, r3
 80009ca:	4770      	bx	lr

080009cc <_fini>:
 80009cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ce:	bf00      	nop
 80009d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009d2:	bc08      	pop	{r3}
 80009d4:	469e      	mov	lr, r3
 80009d6:	4770      	bx	lr
